{
  "$schema": "https://aka.ms/codetour-schema",
  "title": "1: Perform an Auth Code with PKCE Network Trace",
  "steps": [
    {
      "file": "",
      "line": 1,
      "title": "What you'll do",
      "description": "## Here's what you'll do:\n\nIn this lab, you will explore the relevant network traces of the authentication process used in Single Page Application lab."
    },
    {
      "file": "",
      "line": 1,
      "title": "Start the Included Application",
      "description": "## Start the Included Application:\n\nWe've included the SPA application in this lab.\n\n1. #### Click [here](command:auth0.lab.tenantConfigure) to ensure your lab tenant is properly configured. (Note: this will update the Callback URL for the *Lab: SPA App* application in your tenant).\n\n    Wait until you see the message that `resources.xml` has been successfully deploy before continuing to the next step.\n    \n    ![resources deployed message](https://cdn.auth0.com/website/a0fun/v2/resources.png)\n\n1. #### Click [here](command:auth0.lab.localConfigure) to set your local environment configurations (creates `.env` files in `/spa-app` and `/api`)\n    \n    \n\n1. #### Launch the _Lab: SPA and Lab: API_:\n    1. #### Click [here](command:workbench.action.debug.start) to deploy the _Lab: SPA and Lab: API_.\n        Give them a moment to deploy. You can view the progress in the Debug Console.\n\n    1. #### Ensure the ports are public so that the SPA app and API can communicate. Click the ports tab below, then right click each endpoint, and change the port visibility to public. \n\n       *Note: You will need to repeat these steps if you restart your Codespace.*\n\n        ![](https://cdn.auth0.com/website/auth0/labs/ilt/public-ports.gif)\n\n    1. #### Click [here](command:auth0.lab.openEndpointByName?[\"Lab: SPA\"]) to open the app in your browser.\n        \n        You may get a warning from GitHub since we made our ports public. Click **Continue** to proceed.\n        \n        ![](https://cdn.auth0.com/website/a0fun/v2/github-codespaces-dialog.png)\n\n    1. #### Ensure that you're logged out of the app.\n\n    1.  #### If logged in, click the _Logout_ button.\n\n        "
    },
    {
      "title": "Open Chrome Developer Tools",
      "description": "## Open Chrome Developer Tools\n #### We're going to use _[Developer Tools](https://developers.google.com/web/tools/chrome-devtools/open)_ to perform a network trace.  \n\n1. #### Go to the tab with your application. \n      \n2. #### Right click within the application and select _Inspect_. This opens the _Developer Tools_ panel.\n\n1. #### Within this panel, select the _Network_ tab.\n\n![inspect the app code](https://cdn.auth0.com/website/a0fun/v2/trace-1.gif)"
    },
    {
      "title": "Configure Network Trace Settings",
      "description": "## Configure Network Trace Settings\n\n1. #### Ensure the _Preserve log_ and _Disable cache_ options are enabled.\n\n    ![set the correct options](https://cdn.auth0.com/website/a0fun/v2/trace-2.gif)"
    },
    {
      "title": "Perform the Network Trace",
      "description": "# Perform the Network Trace\n\n1. #### In the Lab: SPA, click the _Login_ button.\n    If you've already authorized the app previously, the first thing you will see in _Developer Tools_ is a request similar to the one below. If not, click Authorize first.\n\n    Find the request that starts with **authorize?client_id=...**\n\n    ![log in to the spa app](https://cdn.auth0.com/website/a0fun/v2/trace-3.gif)\n\n1. #### Click the request to see the details of the request. \n\n    In the Payload tab, view the Query String Parameters.\n\n    ![dig into the request](https://cdn.auth0.com/website//auth0/labs/ilt/authorize-request.png)\n\n1. #### Log into the app.\n\n1. #### Filter the requests and show only the XHR ones (those generated by an XMLHttpRequest JavaScript object), then click on the \"token\" request (if there are two, click the second one).\n    You will see that it is a POST request to the token endpoint of the authorization server. This request exchanges the code retrieved on the authentication process for the tokens needed in your application.\n\n    ![view the token](https://cdn.auth0.com/website/auth0/labs/ilt/trace-5.gif)\n\n1. #### To see the data sent to the token endpoint, click on the the _Payload_ tab.\n    There, you will see that the request payload includes the following fields: client_id, code, code_verifier, grant_type, and redirect_uri.\n\n    ![view the headers tab](https://cdn.auth0.com/website/auth0/labs/ilt/trace-6.gif)\n\n\n1. #### Switch to the _Preview_ tab to see the tokens returned by the authorization server.\n\n    ![see what the authorization server returned](https://cdn.auth0.com/website/auth0/labs/ilt/trace-7.gif)\n\n1. #### Copy the value of the _id_token_.",
      "selection": {
        "start": {
          "line": 14,
          "character": 29
        },
        "end": {
          "line": 14,
          "character": 95
        }
      }
    },
    {
      "title": "Decode Your Token",
      "description": "## Decode Your Token\n\n1. #### Go to [jwt.io](https://jwt.io/) and paste the ID token copied from the last step into the text area on the left. \n   Notice that as soon as you paste it, the contents of the text area on the right are updated. This is because the site decodes your ID token and displays its contents (claims) in that panel.\n\n  ![jwt.io](https://cdn.auth0.com/website/a0fun/v2/trace06-jwt.png)  \n  \n  **Note:** About the token structure:  \n  * The token structure: consists of the header (information about the token), the payload (the token’s claims and user profile information), and the signature.\n  * The claim `iss` is  the *issuer* of the token. It denotes who created and signed it. The value should match your Auth0 Domain URI, prefixed by `https://`.\n  * The claim `sub` is the *subject* of the token. It denotes to whom the token refers. In our case, the value matches the ID of the Auth0 user.\n  * The claim `aud` is the *audience* of the token. It denotes for which app the token is intended. In our case, this matches the Client ID of the application that made the authentication request.\n  * The claim `iat` shows *when the token was issued* (seconds since Unix epoch) and can be used to determine the token’s age.\n\n  The claim `exp` shows when the token *expires* (seconds since Unix epoch).\n\n  Congrats! You've performed a Network Trace!"
    },
    {
      "file": "",
      "line": 1,
      "title": "Recap",
      "description": "## In this lab you:\n\n*   Performed network traces to identify the behind the scenes authentication details behind your Single Page Application."
    }
  ]
}